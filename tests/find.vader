Execute(prev_function):
  let lines = [
    \ 'f(X) ->',
    \ '    X.',
    \ 'g(Y) ->',
    \ '    Y.'
    \ ]
  let expected = 2
  let actual = erlgoto#find#prev_function(lines)
  AssertEqual expected, actual

Execute(next_def_end):
  let lines = [
    \ 'f(X) ->',
    \ '    X.',
    \ 'g(Y) ->',
    \ '    Y.'
    \ ]
  let expected = 1
  let actual = erlgoto#find#next_def_end(lines)
  AssertEqual expected, actual

Execute(var_in different variable types):
  let lines = ['Var123', '_123Var', 'VAR_var', '_']
  for line in lines
    let expected = line
    for col in range(1, len(line))
      let actual = erlgoto#find#var_in(line, col)
      " Log 'col = ' . col . ', char = ' . line[col-1]
      AssertEqual expected, actual
    endfor
  endfor

Execute(var_in non-variables):
  let lines = ['1', '1Var', 'atom', "'QuotedAtom'", '#record{}', '?MACRO',
    \ 'function', 'module:function']
  let expected = ''
  for line in lines
    for col in range(1, len(line))
      let actual = erlgoto#find#var_in(line, col)
      " Log 'col = ' . col . ', char = ' . line[col-1]
      AssertEqual expected, actual
    endfor
  endfor

Execute(var_in variables in expressions):
  let inputs = [
    \ {'line': 'Var = 3.', 'match': 'Var', 'match_cols': range(1, 3)},
    \ {'line': 'Var/3.', 'match': 'Var', 'match_cols': range(1, 3)},
    \ {'line': '{ok, Var} = fun(3).', 'match': 'Var', 'match_cols': range(6, 8)},
    \ ]
  for input in inputs
    for col in range(1, len(input.line))
      if index(input.match_cols, col) > -1
        let expected = input.match
      else
        let expected = ''
      endif
      " Log 'col = ' . col . ', char = ' . input.line[col-1]
      let actual = erlgoto#find#var_in(input.line, col)
      AssertEqual expected, actual
    endfor
  endfor

Execute(external_in different lengths):
  let lines = ['m:s', 'module:symbol']
  for line in lines
    let expected = split(line, ':')
    for col in range(1, len(line))
      let actual = erlgoto#find#external_in(line, col)
      " Log 'col = ' . col . ', char = ' . line[col-1]
      AssertEqual expected, actual
    endfor
  endfor

Execute(external_in non-externals):
  let lines = ['1', '1Var', 'atom', "'QuotedAtom'", '#record{}', '?MACRO',
    \ ':symbol', 'module:', ':s', 'm:']
  let expected = []
  for line in lines
    for col in range(1, len(line))
      let actual = erlgoto#find#external_in(line, col)
      " Log 'col = ' . col . ', char = ' . line[col-1]
      AssertEqual expected, actual
    endfor
  endfor

Execute(external_in externals in expressions):
  let inputs = [
    \ {'line': 'Var = mod:fun().', 'match': ['mod', 'fun'], 'match_cols': range(7, 13)},
    \ {'line': 'Var :: mod:type().', 'match': ['mod', 'type'], 'match_cols': range(8, 15)},
    \ {'line': 'Var::mod:type().', 'match': ['mod', 'type'], 'match_cols': range(6, 13)},
    \ {'line': 'fun mod:fun/3.', 'match': ['mod', 'fun'], 'match_cols': range(5, 11)},
    \ {'line': '[fun mod:fun/3, fun/3].', 'match': ['mod', 'fun'], 'match_cols': range(6, 12)},
    \ ]
  for input in inputs
    for col in range(1, len(input.line))
      if index(input.match_cols, col) > -1
        let expected = input.match
      else
        let expected = []
      endif
      " Log 'col = ' . col . ', char = ' . input.line[col-1]
      let actual = erlgoto#find#external_in(input.line, col)
      AssertEqual expected, actual
    endfor
    " Log ''
  endfor

Execute(var_def):
  let variable = 'Var'
  let inputs = [
    \ {'lines': ['main(Var) ->'], 'expected': {'line': 0, 'col': 5}},
    \ {'lines': ['main(Var) ->', '    Var.'], 'expected': {'line': 0, 'col': 5}},
    \ {'lines': ['main(Var) -> Var.', 'main2(Var) ->.', '    Var.'],
        \ 'expected': {'line': 1, 'col': 6}},
    \ {'lines': ['main(X) ->', '    {ok, Var} = f(X).'], 'expected': {'line': 1, 'col': 9}},
    \ ]
  for input in inputs
    let actual = erlgoto#find#var_def(variable, input.lines)
    AssertEqual input.expected, actual
  endfor

Execute(external_defs):
  let symbol = 'f'
  let inputs = [
    \ {'lines': ['f() -> ok.'],
        \ 'expected': [{'start_line': 0, 'end_line': 0, 'col': 0}]},
    \ {'lines': ['f() ->', '    ok.'],
        \ 'expected': [{'start_line': 0, 'end_line': 1, 'col': 0}]},
    \ {'lines': ['f2() ->', '    ok.', 'f() ->', '    ok.'],
        \ 'expected': [{'start_line': 2, 'end_line': 3, 'col': 0}]},
    \ {'lines': ['f() ->', '    ok.', 'f(X) ->', '    X.'],
        \ 'expected': [
          \ {'start_line': 0, 'end_line': 1, 'col': 0},
          \ {'start_line': 2, 'end_line': 3, 'col': 0},
        \ ]},
    \ {'lines': ['-type f() :: integer()'],
        \ 'expected': [{'start_line': 0, 'end_line': 0, 'col': 6}]},
    \ {'lines': ['-type f2() :: integer()', '-type f() :: integer()'],
        \ 'expected': [{'start_line': 1, 'end_line': 1, 'col': 6}]},
    \ {'lines': ['-opaque f() :: integer()'],
        \ 'expected': [{'start_line': 0, 'end_line': 0, 'col': 8}]},
    \ {'lines': ['-opaque f2() :: integer()', '-opaque f() :: integer()'],
        \ 'expected': [{'start_line': 1, 'end_line': 1, 'col': 8}]},
    \ ]
  for input in inputs
    let actual = erlgoto#find#external_defs(symbol, input.lines)
    AssertEqual input.expected, actual
  endfor
