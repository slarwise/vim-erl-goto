" Setup {{{1
After:
  call delete('math.erl')

" Variable {{{1
Given erlang(Variable: goto):
  Y = 4,
  3 = X,
  Xs = 4,
  X = 3,
  X.

Do:
  Ggdx

Expect erlang:
  Y = 4,
  3 = ,
  Xs = 4,
  X = 3,
  X.

" Include function {{{1
Given erlang(Include: goto function):
  add(X, Y) -> X + Y.
  sub(X, Y) -> X - Y.
  main() ->
    sub(1, 2).

Do:
  Ggdx

Expect erlang:
  add(X, Y) -> X + Y.
  ub(X, Y) -> X - Y.
  main() ->
    sub(1, 2).

" Include record {{{1
Given erlang(Include: goto record):
  -record(foo, {}).
  main() ->
    foo{}.

Do:
  Ggdx

Expect erlang:
  -record(oo, {}).
  main() ->
    foo{}.

" Include type {{{1
Given erlang(Include: goto type):
  -type my_int() :: integer().
  -spec (Var :: my_int()) -> ok.

Do:
  G/my\<CR>gdx

Expect erlang:
  -type y_int() :: integer().
  -spec (Var :: my_int()) -> ok.

" Include type no space {{{1
Given erlang(Include: goto type no space):
  -type my_int() :: integer().
  -spec (Var::my_int()) -> ok.

Do:
  G/my\<CR>gdx

Expect erlang:
  -type y_int() :: integer().
  -spec (Var::my_int()) -> ok.

" Include opaque {{{1
Given erlang(Include: goto opaque):
  -opaque my_int() :: integer().
  -spec (Var :: my_int()) -> ok.

Do:
  G/my\<CR>gdx

Expect erlang:
  -opaque y_int() :: integer().
  -spec (Var :: my_int()) -> ok.

" External function {{{1
Given erlang(External: goto function):
  math:sub(2, 1).

Execute:
  call writefile(['add(X, Y) -> X + Y.', 'sub(X, Y) -> X - Y.'], 'math.erl')
  call ErlangGotoDefinition#Do('edit', v:count1)
  AssertEqual 'sub(X, Y) -> X - Y.', getline('.')

" External function ref {{{1
Given erlang(External: goto function ref):
  math:sub/2.

Execute:
  call writefile(['add(X, Y) -> X + Y.', 'sub(X, Y) -> X - Y.'], 'math.erl')
  call ErlangGotoDefinition#Do('edit', v:count1)
  AssertEqual 'sub(X, Y) -> X - Y.', getline('.')

" External type {{{1
Given erlang(External: goto type):
  math:integer().

Execute:
  call writefile(['-type float() :: float().', '-type integer() :: integer().'], 'math.erl')
  call ErlangGotoDefinition#Do('edit', v:count1)
  AssertEqual '-type integer() :: integer().', getline('.')

" External opaque {{{1
Given erlang(External: goto opaque):
  math:integer().

Execute:
  call writefile(['-opaque float() :: float().', '-opaque integer() :: integer().'], 'math.erl')
  call ErlangGotoDefinition#Do('edit', v:count1)
  AssertEqual '-opaque integer() :: integer().', getline('.')

" vim: foldmethod=marker
